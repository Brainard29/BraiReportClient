{"version":3,"file":"static/js/302.af990201.chunk.js","mappings":"2PAEMA,EAAYC,EAAAA,MAAW,kBAAM,sDAAqC,IAClEC,EAASD,EAAAA,MAAW,kBAAM,qDAAqC,IAarE,EATe,CACb,CAAEE,KAAM,IAAKC,OAAO,EAAMC,KAAM,QAChC,CAAEF,KAAM,aAAcE,KAAM,YAAaC,QAASN,GAClD,CAAEG,KAAM,SAAUE,KAAM,QAASC,QAASJ,EAAQE,OAAO,GACzD,CAAED,KAAM,gBAAiBE,KAAM,SAAUC,QAASJ,GAClD,CAAEC,KAAM,qBAAsBE,KAAM,cAAeC,QARlCL,EAAAA,MAAW,kBAAM,qDAA8C,KAShF,CAAEE,KAAM,uBAAwBE,KAAM,gBAAiBC,QARpCL,EAAAA,MAAW,kBAAM,8BAAkD,M,sBCElFM,EAAgB,WACpB,IAAMC,GAAkBC,EAAAA,EAAAA,MAAcC,SAuBhCC,EAhBiB,SAACC,GACtB,IAAMD,EAAc,GAYpB,OAXAC,EAASC,MAAM,KAAKC,QAAO,SAACC,EAAMC,EAAMC,EAAOC,GAC7C,IAAMC,EAAe,UAAMJ,EAAI,YAAIC,GAC7BI,EATW,SAACV,EAAUW,GAC9B,IAAMC,EAAeD,EAAOE,MAAK,SAACC,GAAK,OAAKA,EAAMrB,OAASO,CAAQ,IACnE,QAAOY,GAAeA,EAAajB,IACrC,CAMsBoB,CAAaN,EAAiBE,GAOhD,OANAD,GACET,EAAYe,KAAK,CACfhB,SAAUS,EACVd,KAAMe,EACNO,OAAQV,EAAQ,IAAMC,EAAMU,SAEzBT,CACT,IACOR,CACT,CAEoBkB,CAAerB,GAEnC,OACE,UAAC,KAAW,CAACsB,UAAU,WAAU,WAC/B,SAAC,KAAe,CAACC,KAAK,IAAG,kBACxBpB,EAAYqB,KAAI,SAACC,EAAYhB,GAC5B,OACE,mBAAC,MAAe,kBACTgB,EAAWN,OAAS,CAAEA,QAAQ,GAAS,CAAEI,KAAME,EAAWvB,WAAU,IACzEwB,IAAKjB,IAEJgB,EAAW5B,KAGlB,MAGN,EAEA,EAAeJ,EAAAA,KAAWM,GC3CpB4B,EAAa,WACjB,OACE,SAAC,KAAU,CAACC,IAAE,YACZ,SAAC,EAAAC,SAAQ,CAACC,UAAU,SAAC,KAAQ,CAACC,MAAM,YAAa,UAC/C,UAAC,KAAM,WACJlB,EAAAA,KAAW,SAACG,EAAOgB,GAClB,OACEhB,EAAMlB,UACJ,SAAC,KAAK,CAEJH,KAAMqB,EAAMrB,KACZC,MAAOoB,EAAMpB,MACbC,KAAMmB,EAAMnB,KACZC,SAAS,SAACkB,EAAMlB,QAAO,KAJlBkC,EAQb,KACA,SAAC,KAAK,CAACrC,KAAK,IAAIG,SAAS,SAAC,KAAQ,CAACmC,GAAG,QAAQC,SAAO,YAK/D,EAEA,EAAezC,EAAAA,KAAWkC,GC7BpBQ,EAAY,WAChB,OACE,UAAC,KAAO,YACN,4BACE,uCAGA,iBAAMb,UAAU,OAAM,6BAExB,iBAAKA,UAAU,UAAS,WACtB,iBAAMA,UAAU,OAAM,sBACtB,yCAMR,EAEA,EAAe7B,EAAAA,KAAW0C,G,kGC0B1B,EAtB0B,WACxB,OACE,UAAC,KAAS,CAACC,QAAQ,WAAU,WAC3B,SAAC,KAAe,CAACC,UAAU,aAAaf,UAAU,OAAOgB,OAAO,EAAM,UACpE,SAAC,KAAO,CAACC,I,yhZAAYC,KAAK,UAE5B,UAAC,KAAa,CAAClB,UAAU,OAAOe,UAAU,aAAY,WACpD,SAAC,KAAe,CAACf,UAAU,4BAA2B,uBACtD,UAAC,KAAa,CAACC,KAAK,IAAG,WACrB,SAAC,IAAK,CAACkB,KAAMC,EAAAA,EAASpB,UAAU,SAAS,cAG3C,UAAC,KAAa,CAACC,KAAK,IAAG,WACrB,SAAC,IAAK,CAACkB,KAAME,EAAAA,EAAarB,UAAU,SAAS,eAG/C,SAAC,KAAgB,SAIzB,E,0DC6CA,EApEkB,WAChB,IAAMsB,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMF,WAAW,IACtDG,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAAC,KAAO,CAACC,SAAS,SAAS7B,UAAU,OAAM,WACzC,UAAC,KAAU,CAAC8B,OAAK,aACf,SAAC,KAAc,CACb9B,UAAU,OACV+B,QAAS,kBAAMT,EAAS,CAAEU,KAAM,MAAOR,aAAcA,GAAc,EAAC,UAEpE,SAAC,IAAK,CAACL,KAAMc,EAAAA,EAASf,KAAK,UAE7B,SAAC,KAAY,CAAClB,UAAU,oBAAoBW,GAAG,IAAG,UAChD,SAAC,KAAM,CAACM,IAAKiB,EAAMC,OAAQ,GAAIC,IAAI,YAErC,UAAC,KAAU,CAACpC,UAAU,2BAA0B,WAC9C,SAAC,KAAQ,WACP,SAAC,KAAQ,CAACW,GAAG,aAAa0B,UAAWC,EAAAA,GAAQ,0BAI/C,SAAC,KAAQ,WACP,SAAC,KAAQ,CAACrC,KAAK,IAAG,sBAEpB,SAAC,KAAQ,WACP,SAAC,KAAQ,CAACA,KAAK,IAAG,4BAGtB,UAAC,KAAU,YACT,SAAC,KAAQ,WACP,SAAC,KAAQ,CAACA,KAAK,IAAG,UAChB,SAAC,IAAK,CAACkB,KAAMoB,EAAAA,EAASrB,KAAK,YAG/B,SAAC,KAAQ,WACP,SAAC,KAAQ,CAACjB,KAAK,IAAG,UAChB,SAAC,IAAK,CAACkB,KAAMqB,EAAAA,EAAStB,KAAK,YAG/B,SAAC,KAAQ,WACP,SAAC,KAAQ,CAACjB,KAAK,IAAG,UAChB,SAAC,IAAK,CAACkB,KAAMsB,EAAAA,EAAiBvB,KAAK,YAGvC,SAAC,KAAQ,WACL,SAAC,KAAO,CAACa,QA9CA,WACnBJ,EAAS,SACX,EA4C4C3B,UAAU,aAAakB,KAAK,KAAKT,MAAM,SAAQ,UAC7E,+CAIR,SAAC,KAAU,CAACT,UAAU,OAAM,UAC1B,SAAC,EAAiB,UAGtB,SAAC,KAAc,KACf,SAAC,KAAU,CAAC8B,OAAK,YACf,SAAC,EAAa,QAItB,E,oFCnFaY,EAAgB,SAAH,GAAmB,IAAbC,EAAK,EAALA,MACxB7D,GAAWH,EAAAA,EAAAA,MACXiE,EAAU,SAACrE,EAAM4C,EAAM0B,GAC3B,OACE,gCACG1B,GAAQA,EACR5C,GAAQA,EACRsE,IACC,SAAC,KAAM,CAACpC,MAAOoC,EAAMpC,MAAOT,UAAU,UAAS,SAC5C6C,EAAMC,SAKjB,EAEMC,EAAU,SAACC,EAAM7D,GACrB,IAAQkD,EAA0CW,EAA1CX,UAAW9D,EAA+ByE,EAA/BzE,KAAMsE,EAAyBG,EAAzBH,MAAO1B,EAAkB6B,EAAlB7B,KAAS8B,GAAI,OAAKD,EAAI,GAChDE,EAAYb,EAClB,OACE,mBAACa,GAAS,kBACHD,EAAKtC,KACPsC,EAAKN,OAAS,CACbN,UAAWC,EAAAA,KACZ,IACHlC,IAAKjB,GACD8D,GAEHL,EAAQrE,EAAM4C,EAAM0B,GAG3B,EACMM,EAAW,SAAXA,EAAYH,EAAM7D,GAAW,IAAD,EACxBkD,EAAuCW,EAAvCX,UAAW9D,EAA4ByE,EAA5BzE,KAAM4C,EAAsB6B,EAAtB7B,KAAMR,EAAgBqC,EAAhBrC,GAAOsC,GAAI,OAAKD,EAAI,GAC7CE,EAAYb,EAClB,OACE,SAACa,GAAS,gBACRxC,IAAK0C,OAAOjE,GAEZkE,QAAST,EAAQrE,EAAM4C,GACvBmC,QAASxE,EAASF,SAAS2E,WAAW5C,IAClCsC,GAAI,aAEG,QAFH,EAEPD,EAAKL,aAAK,aAAV,EAAYzC,KAAI,SAAC8C,EAAM7D,GAAK,OAC3B6D,EAAKL,MAAQQ,EAASH,EAAM7D,GAAS4D,EAAQC,EAAM7D,EAAM,MANtDA,EAUX,EAEA,OACE,SAAC,WAAc,UACZwD,GACCA,EAAMzC,KAAI,SAAC8C,EAAM7D,GAAK,OAAM6D,EAAKL,MAAQQ,EAASH,EAAM7D,GAAS4D,EAAQC,EAAM7D,EAAM,KAG7F,E,gHCvBA,EA7Ba,CACX,CACEkD,UAAWmB,EAAAA,GACXjF,KAAM,YACNoC,GAAI,aACJQ,MAAM,SAAC,IAAK,CAACA,KAAMsC,EAAAA,EAAgBC,gBAAgB,aACnDb,MAAO,CACLpC,MAAO,OACPqC,KAAM,QAGV,CACET,UAAWsB,EAAAA,GACXpF,KAAM,SAER,CACE8D,UAAWmB,EAAAA,GACXjF,KAAM,SACNoC,GAAI,gBACJQ,MAAM,SAAC,IAAK,CAACA,KAAMyC,EAAAA,EAAcF,gBAAgB,cAEnD,CACErB,UAAWmB,EAAAA,GACXjF,KAAM,cACNoC,GAAI,qBACJQ,MAAM,SAAC,IAAK,CAACA,KAAM0C,EAAAA,EAAYH,gBAAgB,eCnB7CI,EAAa,WACjB,IAAMxC,GAAWC,EAAAA,EAAAA,MACXwC,GAAatC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMsC,iBAAiB,IAC3DxC,GAAcC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMF,WAAW,IAE5D,OACE,UAAC,KAAQ,CACPK,SAAS,QACTkC,WAAYA,EACZT,QAAS9B,EACTyC,gBAAiB,SAACX,GAChBhC,EAAS,CAAEU,KAAM,MAAOR,YAAa8B,GACvC,EAAE,WAEF,SAAC,KAAa,CAACtD,UAAU,mBAAmBW,GAAG,IAAG,UAChD,SAAC,KAAM,CAACX,UAAU,qBAAqBiB,IAAKiD,EAAO/B,OAAO,KAAKC,IAAI,YAErE,SAAC,KAAW,WACV,SAAC,IAAS,WACR,SAACM,EAAa,CAACC,MAAOwB,SAG1B,SAAC,KAAe,CACdnE,UAAU,mBACV+B,QAAS,kBAAMT,EAAS,CAAEU,KAAM,MAAOgC,mBAAoBD,GAAa,MAIhF,EAEA,EAAe5F,EAAAA,KAAW2F,GC5B1B,EAfsB,WACpB,OACE,4BACE,SAAC,EAAU,KACX,iBAAK9D,UAAU,iDAAgD,WAC7D,SAAC,EAAS,KACV,gBAAKA,UAAU,wBAAuB,UACpC,SAAC,EAAU,OAEb,SAAC,EAAS,SAIlB,C","sources":["routes.js","components/AppBreadcrumb.js","components/AppContent.js","components/AppFooter.js","components/header/AppHeaderDropdown.js","components/AppHeader.js","components/AppSidebarNav.js","_nav.js","components/AppSidebar.js","layout/DefaultLayout.js"],"sourcesContent":["import React from 'react'\n\nconst Dashboard = React.lazy(() => import('./views/dashboard/Dashboard'))\nconst Report = React.lazy(() => import('./views/fitur/report/Report'))\nconst ListReport = React.lazy(() => import('./views/fitur/list-report/ListReport'));\nconst UpdateReport = React.lazy(() => import('./views/fitur/update-report/UpdateReport'));\n\nconst routes = [\n  { path: '/', exact: true, name: 'Home' },\n  { path: '/dashboard', name: 'Dashboard', element: Dashboard },\n  { path: '/fitur', name: 'Fitur', element: Report, exact: true },\n  { path: '/fitur/report', name: 'Report', element: Report },\n  { path: '/fitur/list-report', name: 'List Report', element: ListReport },\n  { path: '/fitur/update-report', name: 'Update Report', element: UpdateReport },\n]\n\nexport default routes\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\n\nimport routes from '../routes'\n\nimport { CBreadcrumb, CBreadcrumbItem } from '@coreui/react'\n\nconst AppBreadcrumb = () => {\n  const currentLocation = useLocation().pathname\n\n  const getRouteName = (pathname, routes) => {\n    const currentRoute = routes.find((route) => route.path === pathname)\n    return currentRoute ? currentRoute.name : false\n  }\n\n  const getBreadcrumbs = (location) => {\n    const breadcrumbs = []\n    location.split('/').reduce((prev, curr, index, array) => {\n      const currentPathname = `${prev}/${curr}`\n      const routeName = getRouteName(currentPathname, routes)\n      routeName &&\n        breadcrumbs.push({\n          pathname: currentPathname,\n          name: routeName,\n          active: index + 1 === array.length ? true : false,\n        })\n      return currentPathname\n    })\n    return breadcrumbs\n  }\n\n  const breadcrumbs = getBreadcrumbs(currentLocation)\n\n  return (\n    <CBreadcrumb className=\"m-0 ms-2\">\n      <CBreadcrumbItem href=\"/\">Home</CBreadcrumbItem>\n      {breadcrumbs.map((breadcrumb, index) => {\n        return (\n          <CBreadcrumbItem\n            {...(breadcrumb.active ? { active: true } : { href: breadcrumb.pathname })}\n            key={index}\n          >\n            {breadcrumb.name}\n          </CBreadcrumbItem>\n        )\n      })}\n    </CBreadcrumb>\n  )\n}\n\nexport default React.memo(AppBreadcrumb)\n","import React, { Suspense } from 'react'\nimport { Navigate, Route, Routes } from 'react-router-dom'\nimport { CContainer, CSpinner } from '@coreui/react'\n\n// routes config\nimport routes from '../routes'\n\nconst AppContent = () => {\n  return (\n    <CContainer lg>\n      <Suspense fallback={<CSpinner color=\"primary\" />}>\n        <Routes>\n          {routes.map((route, idx) => {\n            return (\n              route.element && (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  element={<route.element />}\n                />\n              )\n            )\n          })}\n          <Route path=\"/\" element={<Navigate to=\"login\" replace />} />\n        </Routes>\n      </Suspense>\n    </CContainer>\n  )\n}\n\nexport default React.memo(AppContent)\n","import React from 'react'\nimport { CFooter } from '@coreui/react'\n\nconst AppFooter = () => {\n  return (\n    <CFooter>\n      <div>\n        <a>\n          Berau Coal\n        </a>\n        <span className=\"ms-1\">2022 Intern</span>\n      </div>\n      <div className=\"ms-auto\">\n        <span className=\"me-1\">Made by</span>\n        <a>\n          Brainard\n        </a>\n      </div>\n    </CFooter>\n  )\n}\n\nexport default React.memo(AppFooter)\n","import React from 'react'\nimport {\n  CAvatar,\n  CBadge,\n  CDropdown,\n  CDropdownDivider,\n  CDropdownHeader,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n} from '@coreui/react'\nimport {\n  cilBell,\n  cilCreditCard,\n  cilCommentSquare,\n  cilEnvelopeOpen,\n  cilFile,\n  cilLockLocked,\n  cilSettings,\n  cilTask,\n  cilUser,\n} from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\n\nimport users from '../../assets/user.png'\n\nconst AppHeaderDropdown = () => {\n  return (\n    <CDropdown variant=\"nav-item\">\n      <CDropdownToggle placement=\"bottom-end\" className=\"py-0\" caret={false}>\n        <CAvatar src={users} size=\"sm\" />\n      </CDropdownToggle>\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n        <CDropdownHeader className=\"bg-light fw-semibold py-2\">Settings</CDropdownHeader>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilUser} className=\"me-2\" />\n          Profile\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilSettings} className=\"me-2\" />\n          Settings\n        </CDropdownItem>\n        <CDropdownDivider />\n      </CDropdownMenu>\n    </CDropdown>\n  )\n}\n\nexport default AppHeaderDropdown\n","import React from 'react'\nimport { NavLink, useNavigate } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CContainer,\n  CHeader,\n  CHeaderBrand,\n  CHeaderDivider,\n  CHeaderNav,\n  CHeaderToggler,\n  CNavLink,\n  CNavItem,\n  CImage,\n  CButton\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilBell, cilEnvelopeOpen, cilList, cilMenu } from '@coreui/icons'\n\nimport { AppBreadcrumb } from './index'\nimport { AppHeaderDropdown } from './header/index'\nimport logo from 'src/assets/images/logoHitamBC.png'\n\n\nconst AppHeader = () => {\n  const dispatch = useDispatch()\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    navigate('/login')\n  };\n\n  return (\n    <CHeader position=\"sticky\" className=\"mb-4\">\n      <CContainer fluid>\n        <CHeaderToggler\n          className=\"ps-1\"\n          onClick={() => dispatch({ type: 'set', sidebarShow: !sidebarShow })}\n        >\n          <CIcon icon={cilMenu} size=\"lg\" />\n        </CHeaderToggler>\n        <CHeaderBrand className=\"mx-auto d-md-none\" to=\"/\">\n          <CImage src={logo} height={48} alt=\"Logo\" />\n        </CHeaderBrand>\n        <CHeaderNav className=\"d-none d-md-flex me-auto\">\n          <CNavItem>\n            <CNavLink to=\"/dashboard\" component={NavLink}>\n              Dashboard\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">Users</CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">Settings</CNavLink>\n          </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav>\n          <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilBell} size=\"lg\" />\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilList} size=\"lg\" />\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilEnvelopeOpen} size=\"lg\" />\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n              <CButton onClick={handleLogout} className='text-white' size=\"sm\" color='danger'>\n                <strong>Logout</strong>\n              </CButton>\n            </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav className=\"ms-3\">\n          <AppHeaderDropdown />\n        </CHeaderNav>\n      </CContainer>\n      <CHeaderDivider />\n      <CContainer fluid>\n        <AppBreadcrumb />\n      </CContainer>\n    </CHeader>\n  )\n}\n\nexport default AppHeader\n\n/*\nimport React, {useState} from 'react'\nimport { NavLink, useNavigate } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CContainer,\n  CHeader,\n  CHeaderBrand,\n  CHeaderDivider,\n  CHeaderNav,\n  CHeaderToggler,\n  CNavLink,\n  CNavItem,\n  CButton,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilMenu } from '@coreui/icons'\n\nimport { AppBreadcrumb } from './index'\nimport { AppHeaderDropdown } from './header/index'\nimport logos from 'src/assets/images/logo_berau.png';\nimport { LogOut, reset } from \"src/views/pages/features/authSlice.js\";\n\nimport { logoNegative } from 'src/assets/brand/logo-negative'\nimport { sygnet } from 'src/assets/brand/sygnet'\nimport { logo } from 'src/assets/brand/logo'\n\n\nconst AppHeader = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const sidebarShow = useSelector((state) => state.sidebarShow);\n\n  const logout = () => {\n    dispatch(LogOut());\n    dispatch(reset());\n    navigate(\"/login\");\n  };\n\n  return (\n    <CHeader position=\"sticky\" className=\"mb-4\">\n      <CContainer fluid>\n        <CHeaderToggler\n          className=\"ps-1\"\n          onClick={() => dispatch({ type: 'set', sidebarShow: !sidebarShow })}\n        >\n          <CIcon icon={cilMenu} size=\"lg\" />\n        </CHeaderToggler>\n        <CHeaderBrand className=\"mx-auto d-md-none\" to=\"/\">\n          <CIcon icon={logo} height={48} alt=\"Logo\" />\n        </CHeaderBrand>\n          <CHeaderNav className=\"d-none d-md-flex me-auto\">\n            <CNavItem>\n              <CNavLink to=\"/dashboard\" component={NavLink}>\n                Dashboard\n              </CNavLink>\n            </CNavItem>\n          </CHeaderNav>\n          <CHeaderNav>\n            <CNavItem>\n              <CButton onClick={logout} className='text-white' size=\"sm\" color='danger'>\n                <strong>Logout</strong>\n              </CButton>\n            </CNavItem>\n          </CHeaderNav>\n          <CHeaderNav className=\"ms-3\">\n            <AppHeaderDropdown />\n          </CHeaderNav>\n      </CContainer>\n      <CHeaderDivider />\n      <CContainer fluid>\n        <AppBreadcrumb />\n      </CContainer>\n    </CHeader>\n  )\n}\n\nexport default AppHeader;\n\n/*const handleLogout = () => {\n\t\tlocalStorage.removeItem(\"token\");\n\t\twindow.location.reload();\n};*/","import React from 'react'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport { CBadge } from '@coreui/react'\n\nexport const AppSidebarNav = ({ items }) => {\n  const location = useLocation()\n  const navLink = (name, icon, badge) => {\n    return (\n      <>\n        {icon && icon}\n        {name && name}\n        {badge && (\n          <CBadge color={badge.color} className=\"ms-auto\">\n            {badge.text}\n          </CBadge>\n        )}\n      </>\n    )\n  }\n\n  const navItem = (item, index) => {\n    const { component, name, badge, icon, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        {...(rest.to &&\n          !rest.items && {\n            component: NavLink,\n          })}\n        key={index}\n        {...rest}\n      >\n        {navLink(name, icon, badge)}\n      </Component>\n    )\n  }\n  const navGroup = (item, index) => {\n    const { component, name, icon, to, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        idx={String(index)}\n        key={index}\n        toggler={navLink(name, icon)}\n        visible={location.pathname.startsWith(to)}\n        {...rest}\n      >\n        {item.items?.map((item, index) =>\n          item.items ? navGroup(item, index) : navItem(item, index),\n        )}\n      </Component>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      {items &&\n        items.map((item, index) => (item.items ? navGroup(item, index) : navItem(item, index)))}\n    </React.Fragment>\n  )\n}\n\nAppSidebarNav.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n}\n","import React from 'react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilColumns,\n  cilNewspaper,\n  cilSpeedometer,\n  cilStar,\n} from '@coreui/icons'\nimport { CNavGroup, CNavItem, CNavTitle } from '@coreui/react'\n\nconst _nav = [\n  {\n    component: CNavItem,\n    name: 'Dashboard',\n    to: '/dashboard',\n    icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\n    badge: {\n      color: 'info',\n      text: 'NEW',\n    },\n  },\n  {\n    component: CNavTitle,\n    name: 'Fitur',\n  },\n  {\n    component: CNavItem,\n    name: 'Report',\n    to: '/fitur/report',\n    icon: <CIcon icon={cilNewspaper} customClassName=\"nav-icon\" />,\n  },\n  {\n    component: CNavItem,\n    name: 'List Report',\n    to: '/fitur/list-report',\n    icon: <CIcon icon={cilColumns} customClassName=\"nav-icon\" />,\n  },\n]\n\nexport default _nav\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { CSidebar, CSidebarBrand, CSidebarNav, CSidebarToggler, CImage } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nimport { AppSidebarNav } from './AppSidebarNav'\n\nimport logos from 'src/assets/images/logo_berau.png'\n\nimport SimpleBar from 'simplebar-react'\nimport 'simplebar/dist/simplebar.min.css'\n\n// sidebar nav config\nimport navigation from '../_nav'\n\nconst AppSidebar = () => {\n  const dispatch = useDispatch()\n  const unfoldable = useSelector((state) => state.sidebarUnfoldable)\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n\n  return (\n    <CSidebar\n      position=\"fixed\"\n      unfoldable={unfoldable}\n      visible={sidebarShow}\n      onVisibleChange={(visible) => {\n        dispatch({ type: 'set', sidebarShow: visible })\n      }}\n    >\n      <CSidebarBrand className=\"d-none d-md-flex\" to=\"/\">\n        <CImage className=\"sidebar-brand-full\" src={logos} height=\"48\" alt=\"Logo\" />\n      </CSidebarBrand>\n      <CSidebarNav>\n        <SimpleBar>\n          <AppSidebarNav items={navigation} />\n        </SimpleBar>\n      </CSidebarNav>\n      <CSidebarToggler\n        className=\"d-none d-lg-flex\"\n        onClick={() => dispatch({ type: 'set', sidebarUnfoldable: !unfoldable })}\n      />\n    </CSidebar>\n  )\n}\n\nexport default React.memo(AppSidebar)\n\n/*\nimport React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { CImage, CSidebar, CSidebarBrand, CSidebarNav, CSidebarToggler } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nimport { AppSidebarNav } from './AppSidebarNav'\n\nimport logos from 'src/assets/images/logo_berau.png'\n\nimport SimpleBar from 'simplebar-react'\nimport 'simplebar/dist/simplebar.min.css'\n\n// sidebar nav config\nimport navigation from '../_nav'\n\nconst AppSidebar = () => {\n  const dispatch = useDispatch()\n  const unfoldable = useSelector((state) => state.sidebarUnfoldable)\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n\n  return (\n    <CSidebar\n      position=\"fixed\"\n      unfoldable={unfoldable}\n      visible={sidebarShow}\n      onVisibleChange={(visible) => {\n        dispatch({ type: 'set', sidebarShow: visible })\n      }}\n    >\n      <CSidebarBrand className=\"d-none d-md-flex\" to=\"/\">\n        <CImage className=\"sidebar-brand-full\" src={logos} height=\"48\" alt=\"Logo\" />\n      </CSidebarBrand>\n      <CSidebarNav>\n        <SimpleBar>\n          <AppSidebarNav items={navigation} />\n        </SimpleBar>\n      </CSidebarNav>\n      <CSidebarToggler\n        className=\"d-none d-lg-flex\"\n        onClick={() => dispatch({ type: 'set', sidebarUnfoldable: !unfoldable })}\n      />\n    </CSidebar>\n  )\n}\n\nexport default React.memo(AppSidebar)\n*/\n","import React from 'react'\nimport { AppContent, AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nconst DefaultLayout = () => {\n  return (\n    <div>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n        <AppHeader/>\n        <div className=\"body flex-grow-1 px-3\">\n          <AppContent />\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DefaultLayout\n"],"names":["Dashboard","React","Report","path","exact","name","element","AppBreadcrumb","currentLocation","useLocation","pathname","breadcrumbs","location","split","reduce","prev","curr","index","array","currentPathname","routeName","routes","currentRoute","find","route","getRouteName","push","active","length","getBreadcrumbs","className","href","map","breadcrumb","key","AppContent","lg","Suspense","fallback","color","idx","to","replace","AppFooter","variant","placement","caret","src","size","icon","cilUser","cilSettings","dispatch","useDispatch","sidebarShow","useSelector","state","navigate","useNavigate","position","fluid","onClick","type","cilMenu","logo","height","alt","component","NavLink","cilBell","cilList","cilEnvelopeOpen","AppSidebarNav","items","navLink","badge","text","navItem","item","rest","Component","navGroup","String","toggler","visible","startsWith","CNavItem","cilSpeedometer","customClassName","CNavTitle","cilNewspaper","cilColumns","AppSidebar","unfoldable","sidebarUnfoldable","onVisibleChange","logos","navigation"],"sourceRoot":""}