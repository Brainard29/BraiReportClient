{"version":3,"file":"static/js/778.e1fd07f9.chunk.js","mappings":"8TAAaA,EAAgB,CAAC,UAAU,8Q,+BCqGxC,EA/Ec,WACZ,OAAgCC,EAAAA,EAAAA,UAAS,IAAG,eAArCC,EAAQ,KAAEC,EAAW,KAC5B,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCG,EAAQ,KAAEC,EAAW,KAC7B,GAA0BJ,EAAAA,EAAAA,UAAS,IAAG,eAA/BK,EAAK,KAAEC,EAAQ,KACfC,GAAWC,EAAAA,EAAAA,MAEXC,EAAK,yCAAG,WAAOC,GAAC,sEACH,OAAnBA,EAAEC,iBAAiB,kBAEPC,IAAAA,KAAW,8BAA+B,CAChDX,SAAUA,EACVE,SAAUA,IACT,KAAD,EACFI,EAAS,cAAc,gDAGrB,KAAMM,UACN,KAAMA,SAASC,QAAU,KACzB,KAAMD,SAASC,QAAU,KAEzBR,EAAS,KAAMO,SAASE,KAAKC,SAC9B,yDAEL,gBAjBW,sCAmBX,OACE,gBAAKC,UAAU,yDAAwD,UACrE,SAAC,KAAU,WACT,SAAC,KAAI,CAACA,UAAU,yBAAwB,UACtC,SAAC,KAAI,CAACC,GAAI,EAAE,UACV,SAAC,KAAU,WACT,SAAC,KAAK,CAACD,UAAU,MAAK,UACpB,SAAC,KAAS,WACR,UAAC,KAAK,CAACE,SAAUV,EAAOW,aAAa,MAAK,UACvCf,IAAS,SAAC,KAAM,CAACgB,MAAM,SAASC,aAAW,WAAEjB,KAC9C,mCACA,cAAGY,UAAU,uBAAsB,sCACnC,UAAC,KAAW,CAACA,UAAU,OAAM,WAC3B,SAAC,KAAe,WACd,SAAC,IAAK,CAACM,KAAMC,EAAAA,OAEf,SAAC,KAAU,CACXC,KAAK,WACLC,YAAY,WACZC,SAAU,SAACjB,GAAC,OAAKR,EAAYQ,EAAEkB,OAAOC,MAAM,EAC5CA,MAAO5B,EACP6B,UAAQ,QAGV,UAAC,KAAW,CAACb,UAAU,OAAM,WAC3B,SAAC,KAAe,WACd,SAAC,IAAK,CAACM,KAAMxB,OAEf,SAAC,KAAU,CACTgC,KAAK,WACLL,YAAY,WACZD,KAAK,WACLE,SAAU,SAACjB,GAAC,OAAKN,EAAYM,EAAEkB,OAAOC,MAAM,EAC5CA,MAAO1B,EACP2B,UAAQ,QAGZ,SAAC,KAAI,WACH,SAAC,KAAI,CAACE,GAAI,EAAE,UACV,SAAC,KAAO,CAACD,KAAK,SAASV,MAAM,UAAUY,UAAWhC,IAAaE,EAAS,uCAchG,C","sources":["../node_modules/@coreui/icons/js/free/cil-lock-locked.js","views/pages/login/Login.js"],"sourcesContent":["export const cilLockLocked = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M384,200V144a128,128,0,0,0-256,0v56H88V328c0,92.635,75.364,168,168,168s168-75.365,168-168V200ZM160,144a96,96,0,0,1,192,0v56H160ZM392,328c0,74.99-61.01,136-136,136s-136-61.01-136-136V232H392Z' class='ci-primary'/>\"]","import React,{ useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n//import { LoginUser, reset } from \"src/views/pages/features/authSlice.js\";\nimport {\n  CAlert,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport axios from \"axios\";\n\nconst Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\tconst [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const login = async (e) => {\n\t\te.preventDefault();\n\t\ttry {\n        await axios.post('http://localhost:5000/login', {\n        username: username,\n        password: password,\n      });\n      navigate(\"/dashboard\");\n\t  } catch (error) {\n       if (\n        error.response &&\n        error.response.status >= 400 &&\n        error.response.status <= 500\n      ) {\n        setError(error.response.data.message);        \n      }\n\t\t}\n\t};\n\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={8}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm onSubmit={login} autoComplete='off'>\n                    {error && <CAlert color=\"danger\" dismissible>{error}</CAlert>}\n                    <h1>Login</h1>\n                    <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <CFormInput\n                      name=\"username\" \n                      placeholder=\"Username\" \n                      onChange={(e) => setUsername(e.target.value)}\n                      value={username} \n                      required \n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        name=\"password\" \n                        onChange={(e) => setPassword(e.target.value)}\n                        value={password} \n                        required\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs={6}>\n                        <CButton type=\"submit\" color=\"success\" disabled={!username || !password}>\n                          Login\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\nexport default Login\n/*\nconst Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { user, isError, isSuccess, isLoading, message } = useSelector(\n    (state) => state.auth\n  );\n\n  useEffect(() => {\n    if (user || isSuccess) {\n      navigate(\"/dashboard\");\n    }\n    dispatch(reset());\n  }, [user, isSuccess, dispatch, navigate]);\n\n  const Auth = (e) => {\n    e.preventDefault();\n    dispatch(LoginUser({ username, password }));\n  };\n\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={8}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm onSubmit={Auth}>\n                    {isError && <CAlert color=\"danger\" dismissible>{message}</CAlert>}\n                    <h1>Login</h1>\n                    <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <CFormInput\n                      name=\"username\" \n                      placeholder=\"Username\" \n                      onChange={(e) => setUsername(e.target.value)}\n                      value={username} \n                      required \n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        name=\"password\" \n                        onChange={(e) => setPassword(e.target.value)}\n                        value={password} \n                        required\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs={6}>\n                        <CButton type=\"submit\" color=\"success\" disabled={!username || !password}>\n                          {isLoading ? \"Loading...\" : \"LOGIN\"}\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\nexport default Login\n*/\n"],"names":["cilLockLocked","useState","username","setUsername","password","setPassword","error","setError","navigate","useNavigate","login","e","preventDefault","axios","response","status","data","message","className","md","onSubmit","autoComplete","color","dismissible","icon","cilUser","name","placeholder","onChange","target","value","required","type","xs","disabled"],"sourceRoot":""}